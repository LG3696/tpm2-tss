extern crate bindgen;

use std::env;
use std::path::PathBuf;

fn main() {
    let bindings = bindgen::Builder::default()
        .header("/mnt/c/Users/hollajoh/projects/tpm/tpm2-tss/include/tss2/tss2_tcti.h")
        .header("/mnt/c/Users/hollajoh/projects/tpm/tpm2-tss/include/tss2/tss2_common.h")
        .header("/mnt/c/Users/hollajoh/projects/tpm/tpm2-tss/src/tss2-tcti/tcti-common.h")
        .header("/mnt/c/Users/hollajoh/projects/tpm/tpm2-tss/include/tss2/tss2_tctildr.h") // should not be neccessary if tctildr was tcti?
        // .clang_args([
        //     "-I/mnt/c/Users/hollajoh/projects/tpm/tpm2-tss/include/tss2",
        //     "-ltss2-tctildr",
        //     "-L/mnt/c/Users/hollajoh/projects/tpm/tpm2-tss/src/tss2-tcti/.libs",
        // ])
        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
        .generate()
        .expect("Unable to generate rust bindings for TCTI C code");

    // Write the bindings to the $OUT_DIR/bindings.rs file.
    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Couldn't write bindings!");
}
